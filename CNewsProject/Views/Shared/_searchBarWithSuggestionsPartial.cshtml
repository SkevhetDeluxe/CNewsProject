@model SearchBarSetting
@inject IJsonHelper Json;

<style>
    .autocomplete {
        position: relative;
        display: inline-block;
    }
    input {
        border: 1px solid black;
        background-color: #f1f1f1;
        font-size: 16px;
    }
    input[type=text] {
        background-color: #f1f1f1;
        width: 100%;
    }
    input[type=submit] {
        background-color: DodgerBlue;
        color: #fff;
    }
    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }
    .autocomplete-items div {
        padding: 10px;
        cursor: pointer;
        background-color: #fff;
        border-bottom: 1px solid #d4d4d4;
    }
    .autocomplete-items div:hover {
        /*when hovering an item:*/
        background-color: #e9e9e9;
    }
    .autocomplete-active {
        /*when navigating through the items using the arrow keys:*/
        background-color: DodgerBlue !important;
        color: #ffffff;
    }
</style>

<div id="@Model.ContainerId">
    <div class="autocomplete" style="width:200px;">
        @{
            if (Model.ControllerParameter == "No Parameter")
            {
                <input autocomplete="off" id="@Model.InputFieldId" type="text" placeholder="@Model.Placeholder">
            }
            else
            {
                <input autocomplete="off" id="@Model.InputFieldId" type="text" name="@Model.ControllerParameter" placeholder="@Model.Placeholder">
            }
        }
    </div>
    <div class="btn btn-primary" id="@Model.ButtonId">@Model.ButtonName</div>
</div>



@*//TODO YO MATE, WE NEED FUNCTIONALITY TO ADD AUTHORS TO USERS.AUTHORNAMES HERE MAAAAN*@
<script src="/js/cscripts.js"></script>

<script type="text/javascript">
    let @{@Model.JsArrayName} = @Html.Raw(Json.Serialize(Model.Suggestions));
    
    document.addEventListener('DOMContentLoaded', function () { 

        function autocomplete(inp) {
            let currentFocus;
            inp.addEventListener("input", function(e) {
                var a, b, i, val = this.value;
                closeAllLists();
                if (!val) { return false;}
                currentFocus = -1;
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                this.parentNode.appendChild(a);
                for (i = 0; i < @{@Model.JsArrayName}.length; i++) {
                    let item = String(@{@Model.JsArrayName}[i]);
                    let lowerItem = item.toLowerCase();
                    let lowerVal = val.toLowerCase();
                    let [isInString, startCursor] = StringHas(lowerItem, lowerVal)
                    
                    if (isInString){ //.substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                        b = document.createElement("DIV");
                        
                        if (startCursor > 0){
                            b.innerHTML = @{@Model.JsArrayName}[i].substr(0, startCursor);
                            b.innerHTML += "<strong>" + @{@Model.JsArrayName}[i].substr(startCursor, val.length) + "</strong";
                            b.innerHTML += @{@Model.JsArrayName}[i].substr(startCursor + val.length);
                            b.innerHTML += "<input type='hidden' value='" + @{@Model.JsArrayName}[i] + "'>";
                        }
                        else{
                            b.innerHTML = "<strong>" + @{@Model.JsArrayName}[i].substr(0, val.length) + "</strong>";
                            b.innerHTML += @{@Model.JsArrayName}[i].substr(val.length);
                            b.innerHTML += "<input type='hidden' value='" + @{@Model.JsArrayName}[i] + "'>";
                        }
                       
                        
                        b.addEventListener("click", function(e) {
                            
                            inp.value = this.getElementsByTagName("input")[0].value;
                            
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            });
            inp.addEventListener("keydown", function(e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    currentFocus++;
                    addActive(x);
                } else if (e.keyCode == 38) { 
                    currentFocus--;
                    addActive(x);
                } else if (e.keyCode == 13) {
                    e.preventDefault();
                    if (currentFocus > -1) {
                        if (x) x[currentFocus].click();
                    }
                }
            });
            function addActive(x) {
                if (!x) return false;
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                x[currentFocus].classList.add("autocomplete-active");
            }
            function removeActive(x) {
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }
            function closeAllLists(elmnt) {
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }

        autocomplete(document.getElementById("@Model.InputFieldId"));
    });

</script>