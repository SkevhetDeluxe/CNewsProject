// <auto-generated />
using System;
using CNewsProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CNewsProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240909121233_YesPlease")]
    partial class YesPlease
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CNewsProject.Models.Api.CurrencyExchangeRate.Rates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AED")
                        .HasColumnType("real");

                    b.Property<float>("AFN")
                        .HasColumnType("real");

                    b.Property<float>("ALL")
                        .HasColumnType("real");

                    b.Property<float>("AMD")
                        .HasColumnType("real");

                    b.Property<float>("ANG")
                        .HasColumnType("real");

                    b.Property<float>("AOA")
                        .HasColumnType("real");

                    b.Property<float>("ARS")
                        .HasColumnType("real");

                    b.Property<float>("AUD")
                        .HasColumnType("real");

                    b.Property<float>("AWG")
                        .HasColumnType("real");

                    b.Property<float>("AZN")
                        .HasColumnType("real");

                    b.Property<float>("BAM")
                        .HasColumnType("real");

                    b.Property<float>("BBD")
                        .HasColumnType("real");

                    b.Property<float>("BDT")
                        .HasColumnType("real");

                    b.Property<float>("BGN")
                        .HasColumnType("real");

                    b.Property<float>("BHD")
                        .HasColumnType("real");

                    b.Property<float>("BIF")
                        .HasColumnType("real");

                    b.Property<float>("BMD")
                        .HasColumnType("real");

                    b.Property<float>("BND")
                        .HasColumnType("real");

                    b.Property<float>("BOB")
                        .HasColumnType("real");

                    b.Property<float>("BRL")
                        .HasColumnType("real");

                    b.Property<float>("BSD")
                        .HasColumnType("real");

                    b.Property<float>("BTN")
                        .HasColumnType("real");

                    b.Property<float>("BWP")
                        .HasColumnType("real");

                    b.Property<float>("BYN")
                        .HasColumnType("real");

                    b.Property<float>("BZD")
                        .HasColumnType("real");

                    b.Property<float>("CAD")
                        .HasColumnType("real");

                    b.Property<float>("CDF")
                        .HasColumnType("real");

                    b.Property<float>("CHF")
                        .HasColumnType("real");

                    b.Property<float>("CLP")
                        .HasColumnType("real");

                    b.Property<float>("CNY")
                        .HasColumnType("real");

                    b.Property<float>("COP")
                        .HasColumnType("real");

                    b.Property<float>("CRC")
                        .HasColumnType("real");

                    b.Property<float>("CUP")
                        .HasColumnType("real");

                    b.Property<float>("CVE")
                        .HasColumnType("real");

                    b.Property<float>("CZK")
                        .HasColumnType("real");

                    b.Property<float>("DJF")
                        .HasColumnType("real");

                    b.Property<float>("DKK")
                        .HasColumnType("real");

                    b.Property<float>("DOP")
                        .HasColumnType("real");

                    b.Property<float>("DZD")
                        .HasColumnType("real");

                    b.Property<DateOnly>("DateUpdated")
                        .HasColumnType("date");

                    b.Property<float>("EGP")
                        .HasColumnType("real");

                    b.Property<float>("ERN")
                        .HasColumnType("real");

                    b.Property<float>("ETB")
                        .HasColumnType("real");

                    b.Property<float>("EUR")
                        .HasColumnType("real");

                    b.Property<float>("FJD")
                        .HasColumnType("real");

                    b.Property<float>("FKP")
                        .HasColumnType("real");

                    b.Property<float>("FOK")
                        .HasColumnType("real");

                    b.Property<float>("GBP")
                        .HasColumnType("real");

                    b.Property<float>("GEL")
                        .HasColumnType("real");

                    b.Property<float>("GGP")
                        .HasColumnType("real");

                    b.Property<float>("GHS")
                        .HasColumnType("real");

                    b.Property<float>("GIP")
                        .HasColumnType("real");

                    b.Property<float>("GMD")
                        .HasColumnType("real");

                    b.Property<float>("GNF")
                        .HasColumnType("real");

                    b.Property<float>("GTQ")
                        .HasColumnType("real");

                    b.Property<float>("GYD")
                        .HasColumnType("real");

                    b.Property<float>("HKD")
                        .HasColumnType("real");

                    b.Property<float>("HNL")
                        .HasColumnType("real");

                    b.Property<float>("HRK")
                        .HasColumnType("real");

                    b.Property<float>("HTG")
                        .HasColumnType("real");

                    b.Property<float>("HUF")
                        .HasColumnType("real");

                    b.Property<float>("IDR")
                        .HasColumnType("real");

                    b.Property<float>("ILS")
                        .HasColumnType("real");

                    b.Property<float>("IMP")
                        .HasColumnType("real");

                    b.Property<float>("INR")
                        .HasColumnType("real");

                    b.Property<float>("IQD")
                        .HasColumnType("real");

                    b.Property<float>("IRR")
                        .HasColumnType("real");

                    b.Property<float>("ISK")
                        .HasColumnType("real");

                    b.Property<float>("JEP")
                        .HasColumnType("real");

                    b.Property<float>("JMD")
                        .HasColumnType("real");

                    b.Property<float>("JOD")
                        .HasColumnType("real");

                    b.Property<float>("JPY")
                        .HasColumnType("real");

                    b.Property<float>("KES")
                        .HasColumnType("real");

                    b.Property<float>("KGS")
                        .HasColumnType("real");

                    b.Property<float>("KHR")
                        .HasColumnType("real");

                    b.Property<float>("KID")
                        .HasColumnType("real");

                    b.Property<float>("KMF")
                        .HasColumnType("real");

                    b.Property<float>("KRW")
                        .HasColumnType("real");

                    b.Property<float>("KWD")
                        .HasColumnType("real");

                    b.Property<float>("KYD")
                        .HasColumnType("real");

                    b.Property<float>("KZT")
                        .HasColumnType("real");

                    b.Property<float>("LAK")
                        .HasColumnType("real");

                    b.Property<float>("LBP")
                        .HasColumnType("real");

                    b.Property<float>("LKR")
                        .HasColumnType("real");

                    b.Property<float>("LRD")
                        .HasColumnType("real");

                    b.Property<float>("LSL")
                        .HasColumnType("real");

                    b.Property<float>("LYD")
                        .HasColumnType("real");

                    b.Property<float>("MAD")
                        .HasColumnType("real");

                    b.Property<float>("MDL")
                        .HasColumnType("real");

                    b.Property<float>("MGA")
                        .HasColumnType("real");

                    b.Property<float>("MKD")
                        .HasColumnType("real");

                    b.Property<float>("MMK")
                        .HasColumnType("real");

                    b.Property<float>("MNT")
                        .HasColumnType("real");

                    b.Property<float>("MOP")
                        .HasColumnType("real");

                    b.Property<float>("MRU")
                        .HasColumnType("real");

                    b.Property<float>("MUR")
                        .HasColumnType("real");

                    b.Property<float>("MVR")
                        .HasColumnType("real");

                    b.Property<float>("MWK")
                        .HasColumnType("real");

                    b.Property<float>("MXN")
                        .HasColumnType("real");

                    b.Property<float>("MYR")
                        .HasColumnType("real");

                    b.Property<float>("MZN")
                        .HasColumnType("real");

                    b.Property<float>("NAD")
                        .HasColumnType("real");

                    b.Property<float>("NGN")
                        .HasColumnType("real");

                    b.Property<float>("NIO")
                        .HasColumnType("real");

                    b.Property<float>("NOK")
                        .HasColumnType("real");

                    b.Property<float>("NPR")
                        .HasColumnType("real");

                    b.Property<float>("NZD")
                        .HasColumnType("real");

                    b.Property<float>("OMR")
                        .HasColumnType("real");

                    b.Property<float>("PAB")
                        .HasColumnType("real");

                    b.Property<float>("PEN")
                        .HasColumnType("real");

                    b.Property<float>("PGK")
                        .HasColumnType("real");

                    b.Property<float>("PHP")
                        .HasColumnType("real");

                    b.Property<float>("PKR")
                        .HasColumnType("real");

                    b.Property<float>("PLN")
                        .HasColumnType("real");

                    b.Property<float>("PYG")
                        .HasColumnType("real");

                    b.Property<float>("QAR")
                        .HasColumnType("real");

                    b.Property<float>("RON")
                        .HasColumnType("real");

                    b.Property<float>("RSD")
                        .HasColumnType("real");

                    b.Property<float>("RUB")
                        .HasColumnType("real");

                    b.Property<float>("RWF")
                        .HasColumnType("real");

                    b.Property<float>("SAR")
                        .HasColumnType("real");

                    b.Property<float>("SBD")
                        .HasColumnType("real");

                    b.Property<float>("SCR")
                        .HasColumnType("real");

                    b.Property<float>("SDG")
                        .HasColumnType("real");

                    b.Property<int>("SEK")
                        .HasColumnType("int");

                    b.Property<float>("SGD")
                        .HasColumnType("real");

                    b.Property<float>("SHP")
                        .HasColumnType("real");

                    b.Property<float>("SLE")
                        .HasColumnType("real");

                    b.Property<float>("SLL")
                        .HasColumnType("real");

                    b.Property<float>("SOS")
                        .HasColumnType("real");

                    b.Property<float>("SRD")
                        .HasColumnType("real");

                    b.Property<float>("SSP")
                        .HasColumnType("real");

                    b.Property<float>("STN")
                        .HasColumnType("real");

                    b.Property<float>("SYP")
                        .HasColumnType("real");

                    b.Property<float>("SZL")
                        .HasColumnType("real");

                    b.Property<float>("THB")
                        .HasColumnType("real");

                    b.Property<float>("TJS")
                        .HasColumnType("real");

                    b.Property<float>("TMT")
                        .HasColumnType("real");

                    b.Property<float>("TND")
                        .HasColumnType("real");

                    b.Property<float>("TOP")
                        .HasColumnType("real");

                    b.Property<float>("TRY")
                        .HasColumnType("real");

                    b.Property<float>("TTD")
                        .HasColumnType("real");

                    b.Property<float>("TVD")
                        .HasColumnType("real");

                    b.Property<float>("TWD")
                        .HasColumnType("real");

                    b.Property<float>("TZS")
                        .HasColumnType("real");

                    b.Property<float>("UAH")
                        .HasColumnType("real");

                    b.Property<float>("UGX")
                        .HasColumnType("real");

                    b.Property<float>("USD")
                        .HasColumnType("real");

                    b.Property<float>("UYU")
                        .HasColumnType("real");

                    b.Property<float>("UZS")
                        .HasColumnType("real");

                    b.Property<float>("VES")
                        .HasColumnType("real");

                    b.Property<float>("VND")
                        .HasColumnType("real");

                    b.Property<float>("VUV")
                        .HasColumnType("real");

                    b.Property<float>("WST")
                        .HasColumnType("real");

                    b.Property<float>("XAF")
                        .HasColumnType("real");

                    b.Property<float>("XCD")
                        .HasColumnType("real");

                    b.Property<float>("XDR")
                        .HasColumnType("real");

                    b.Property<float>("XOF")
                        .HasColumnType("real");

                    b.Property<float>("XPF")
                        .HasColumnType("real");

                    b.Property<float>("YER")
                        .HasColumnType("real");

                    b.Property<float>("ZAR")
                        .HasColumnType("real");

                    b.Property<float>("ZMW")
                        .HasColumnType("real");

                    b.Property<float>("ZWL")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("CNewsProject.Models.Api.Weather.HistoricalWeather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("HistoricalWeathers");
                });

            modelBuilder.Entity("CNewsProject.Models.DataBase.AccountSettings.NewsLetterSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Latest")
                        .HasColumnType("bit");

                    b.Property<bool>("Popular")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("NewsLetterSettings");
                });

            modelBuilder.Entity("CNewsProject.Models.DataBase.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeclineMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ImageLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsntNotFree")
                        .HasColumnType("bit");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("LinkText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThePublisherUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<DateTime>("WrittenDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("CNewsProject.Models.DataBase.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("CNewsProject.Models.DataBase.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobilenumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subscriptions")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CNewsProject.Models.DataBase.EditorsChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("EditorsChoice");
                });

            modelBuilder.Entity("CNewsProject.Models.DataBase.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Fire")
                        .HasColumnType("bit");

                    b.Property<string>("LikedArticles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("NewsLetterSettingId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeCreateCustomer")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NewsLetterSettingId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CNewsProject.Models.DataBase.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiresDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HistoricalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("PaymentComplete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RenewedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("CNewsProject.Models.DataBase.SubscriptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionType");
                });

            modelBuilder.Entity("CNewsProject.Models.DataBase.VisitorCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("VisitorCounts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CNewsProject.Models.DataBase.Article", b =>
                {
                    b.HasOne("CNewsProject.Models.DataBase.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CNewsProject.Models.DataBase.EditorsChoice", b =>
                {
                    b.HasOne("CNewsProject.Models.DataBase.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("CNewsProject.Models.DataBase.Identity.AppUser", b =>
                {
                    b.HasOne("CNewsProject.Models.DataBase.AccountSettings.NewsLetterSetting", "NewsLetterSetting")
                        .WithMany()
                        .HasForeignKey("NewsLetterSettingId");

                    b.Navigation("NewsLetterSetting");
                });

            modelBuilder.Entity("CNewsProject.Models.DataBase.Subscription", b =>
                {
                    b.HasOne("CNewsProject.Models.DataBase.SubscriptionType", "SubscriptionType")
                        .WithMany()
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CNewsProject.Models.DataBase.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CNewsProject.Models.DataBase.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CNewsProject.Models.DataBase.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CNewsProject.Models.DataBase.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CNewsProject.Models.DataBase.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
